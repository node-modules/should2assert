'use strict';

const assert = require('assert');

describe('test/b.test.js', () => {
  it('should be ok', () => {
    const offset = 1;
    const zero = 0;
    const str = '';
    const obj = {};
    const arr = [];
    const b = true;
    const fn = () => {};
    const err = new Error('mock error');
    const date = new Date();
    assert(offset);
    assert(offset);
    assert(offset);
    assert(!zero);
    assert(!zero);
    assert(!zero);
    assert(!zero);
    assert(typeof offset === 'number');
    assert(typeof offset === 'number');
    assert(typeof str === 'string');
    assert(typeof str === 'string');
    assert(typeof obj === 'object');
    assert(typeof obj === 'object');
    assert(Array.isArray(arr));
    assert(Array.isArray(arr));
    assert(typeof b === 'boolean');
    assert(typeof b === 'boolean');
    assert(typeof fn === 'function');
    assert(typeof fn === 'function');
    assert(err instanceof Error);
    assert(err instanceof Error);
    assert(typeof '123' !== 'number');
    assert(typeof '123' !== 'number');
    assert(typeof 123 !== 'string');
    assert(typeof 123 !== 'string');
    assert(typeof 123 !== 'boolean');
    assert(typeof 123 !== 'boolean');
    assert(typeof 123 !== 'function');
    assert(typeof 123 !== 'function');
    assert(typeof 123 !== 'object');
    assert(typeof 123 !== 'object');
    assert(!Array.isArray(123));
    assert(!Array.isArray(123));
    assert(!(123 instanceof Error));
    assert(!(123 instanceof Error));
    assert(!Array.isArray(123));
    assert(!(123 instanceof Error));
    assert(!(obj instanceof Error));
    assert(obj instanceof Object);
    assert(123 instanceof Number);
    assert(!(123 instanceof Object));
    assert(!(obj instanceof Number));
    assert(Object.prototype.toString.call(date) === '[object Date]');
    assert(Object.prototype.toString.call(date) === '[object Date]');
    assert(Object.prototype.toString.call(obj) !== '[object Date]');
    assert(Object.prototype.toString.call(obj) !== '[object Date]');
  });
});
