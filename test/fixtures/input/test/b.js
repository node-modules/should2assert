'use strict';

const assert = require('assert');
const should = require('should');

describe('test/b.test.js', () => {
  it('should be ok', () => {
    const offset = 1;
    const zero = 0;
    const str = '';
    const obj = {};
    const arr = [];
    const b = true;
    const c = false;
    const fn = () => {};
    const err = new Error('mock error');
    const date = new Date();
    assert(offset);
    offset.should.be.ok;
    offset.should.be.ok();
    zero.should.not.be.ok;
    zero.should.not.be.ok();
    zero.should.be.not.ok;
    zero.should.be.not.ok();
    offset.should.be.a.Number;
    offset.should.be.a.Number();
    str.should.be.a.String;
    str.should.be.a.String();
    obj.should.be.an.Object;
    obj.should.be.an.Object();
    arr.should.be.an.Array;
    arr.should.be.an.Array();
    b.should.be.a.Boolean;
    b.should.be.a.Boolean();
    fn.should.be.a.Function;
    fn.should.be.a.Function();
    err.should.be.an.Error;
    err.should.be.an.Error();
    ('123').should.not.be.a.Number;
    ('123').should.not.be.a.Number();
    (123).should.not.be.a.String;
    (123).should.not.be.a.String();
    (123).should.not.be.a.Boolean;
    (123).should.not.be.a.Boolean();
    (123).should.not.be.a.Function;
    (123).should.not.be.a.Function();
    (123).should.not.be.a.Object;
    (123).should.not.be.a.Object();
    (123).should.not.be.an.Array;
    (123).should.not.be.an.Array();
    (123).should.not.be.an.Error;
    (123).should.not.be.an.Error();
    (123).should.not.be.Array;
    (123).should.not.be.Error;
    obj.should.not.be.Error;
    obj.should.be.an.instanceof(Object);
    (123).should.be.an.instanceof(Number);
    (123).should.not.be.an.instanceof(Object);
    obj.should.not.be.an.instanceof(Number);
    date.should.be.a.Date;
    date.should.be.a.Date();
    obj.should.not.be.a.Date;
    obj.should.not.be.a.Date();
    b.should.be.true;
    c.should.be.false;
  });
});
